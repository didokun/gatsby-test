{"version":3,"sources":["webpack:///./src/utils/form-validation.js","webpack:///./src/components/form/ContactForm.js","webpack:///./src/templates/contact.js","webpack:///./src/connectivity/api.form.js","webpack:///./src/connectivity/request-config.js"],"names":["FormValidation","required","value","toString","trim","length","email","validator","isEmail","lt","props","maxLength","react_default","a","createElement","className","validationMessage","type","lang","string","StringHandler","stringI18n","NameForm","_this","_React$Component","call","this","state","message","content","handleValidSubmit","bind","assertThisInitialized_default","event","values","_this2","data","contact_form","target_id","uid","subject","name","first_name","last_name","mail","field_destination","destination","console","log","form_api","then","setState","catch","e","render","Languages","lib","onValidSubmit","reactstrap_es","color","label","errorMessage","informations","map","element","key","React","Component","propTypes","PropTypes","isRequired","ContactPage","_ref","pageContext","layout","context","pageContent","lg","md","xs","dangerouslySetInnerHTML","__html","node_content","field_contact_info","ContactForm_NameForm","request_config","require","axios","module","exports","form","config","method","request","env","API_URL","process","API_BASE","BASIC_AUTH_USERNAME","BASIC_AUTH_PASSWORD","API_TYPE","url","jsonapi","rest","baseURL","headers","Content-Type","Accept-Language"],"mappings":"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","file":"component---src-templates-contact-js-0c63345f28ceb003c983.js","sourcesContent":["import validator from 'validator';\nimport React from 'react';\nimport StringHandler from './string-handler';\n\nexport default class FormValidation {\n    /**\n     * Check Input Require\n     * @param value\n     * @returns {string}\n     */\n    static required(value) {\n        if (!value.toString().trim().length) {\n            // We can return string or jsx as the 'error' prop for the validated Component\n            return 'require';\n        }\n    };\n\n    /**\n     * Check Input is Email\n     * @param value\n     * @returns {string}\n     */\n    static  email (value) {\n        if (!validator.isEmail(value)) {\n            return `${value} is not a valid email.`\n        }\n    };\n\n    /**\n     * Check Input Length Validation\n     * @param value\n     * @param props\n     * @returns {*}\n     */\n    static  lt (value, props) {\n        // get the maxLength from component's props\n        if (!value.toString().trim().length > props.maxLength) {\n            // Return jsx\n            return <span className=\"error\">The value exceeded {props.maxLength} symbols.</span>\n        }\n    };\n\n    static validationMessage(type, lang) {\n        let string = \"\";\n        switch (type) {\n            case 'required':\n                string = StringHandler.stringI18n(\"This field is required\", lang);\n                break;\n            case 'email':\n                string = StringHandler.stringI18n(\"Email format not valid\", lang);\n                break;\n        }\n        return string;\n    }\n}","import React from 'react';\nimport { Alert, Button } from 'reactstrap';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport PropTypes from 'prop-types';\nimport FormValidation from '../../utils/form-validation';\nimport StringHandler from '../../utils/string-handler';\nimport Languages from '../../data/global/languages';\nimport form_api from '../../connectivity/api.form';\nexport default class NameForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {message: {type : \"\", content: \"\"}};\n        this.handleValidSubmit = this.handleValidSubmit.bind(this);\n    }\n    static propTypes = {\n        lang: PropTypes.string.isRequired\n    };\n\n    handleValidSubmit(event, values) {\n        //this.setState({email: values.email});\n        let data = {\n            \"contact_form\":[{\"target_id\":\"contact\"}],\n            \"uid\": [{\"target_id\": \"contact\" }],\n            \"subject\":[{\"value\":values.subject}],\n            \"name\":[{\"value\": values.first_name + \", \" + values.last_name}],\n            \"mail\":[{\"value\": values.mail}],\n            \"field_destination\":[{\"value\": values.destination}],\n            \"message\":[{\"value\": values.message}]\n        };\n        console.log(data);\n        form_api(this.props.lang, 'contact', data).then(values => {\n            this.setState({message: {type: \"success\", \"content\" : \"L3az\"}});\n            console.log(values);\n        }).catch(e => {\n            this.setState({message: {type: \"danger\", \"content\" : e}});\n        });\n    }\n\n    render() {\n        let lang = this.props.lang;\n        console.log(Languages);\n        return (\n            <AvForm onValidSubmit={this.handleValidSubmit}>\n                {this.state.message.content.length > 0 ? (\n                    <Alert color={this.state.message.type}>\n                        {this.state.message.content}\n                    </Alert>\n                ): null}\n                <AvField name=\"subject\" label={StringHandler.stringI18n(\"Subject\", lang)} type=\"text\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                <AvField name=\"first_name\" label={StringHandler.stringI18n(\"First name\", lang)} type=\"text\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                <AvField name=\"last_name\" label={StringHandler.stringI18n(\"Last name\", lang)} type=\"text\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                <AvField name=\"mail\" label={StringHandler.stringI18n(\"Email\", lang)} type=\"email\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                <AvField type=\"select\" label={StringHandler.stringI18n(\"Destination\", lang)} name=\"field_destination\" required errorMessage={FormValidation.validationMessage('required', lang)}>\n                    <option value=\"\">{StringHandler.stringI18n(\"-Select destination-\", lang)}</option>\n                    {Languages.informations[lang].destination.map(element => (\n                        <option key={element.key} value={element.key}>{element.value}</option>\n                    ))}\n                </AvField>\n                <AvField name=\"message\" label=\"Message\" type=\"textarea\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                <Button color=\"primary\">{StringHandler.stringI18n(\"Submit\", lang)}</Button>\n            </AvForm>\n        );\n    }\n}","import React from 'react'\n\nimport Layout from '../components/layout/layout';\nimport PageContent from '../components/layout/pageContent';\nimport {Container, Row, Col} from 'reactstrap';\nimport ContactForm from '../components/form/ContactForm';\n\nconst ContactPage = ({pageContext}) => {\n    return (\n        <Layout context={pageContext}>\n            <PageContent context={pageContext}/>\n            <Container>\n                <Row className=\"contact\">\n                    <Col lg=\"6\" md=\"6\" xs=\"12\" className=\"information\">\n                        <div className=\"content\" dangerouslySetInnerHTML={{__html: pageContext.node_content.field_contact_info[0].value}}/>\n                    </Col>\n                    <Col lg=\"6\" md=\"6\" xs=\"12\" className=\"form\">\n                        <ContactForm lang={pageContext.lang} />\n                    </Col>\n                </Row>\n            </Container>\n        </Layout>\n    )\n};\n\nexport default ContactPage\n","const request_config = require('./request-config');\nconst axios = require('axios');\n\nfunction form_api(lang = 'en', form, data) {\n  const config = request_config.config(lang, '/entity/'+form + '_message/', true, true);\n  config.method = 'POST';\n  config.data = data;\n  return axios.request(config);\n}\n  \nmodule.exports = form_api;","\n\nconst env = {\n  API_URL: process.env.API_URL ? process.env.API_URL : 'http://www.parrot-corporate.local/',\n  API_BASE: process.env.API_BASE ? process.env.API_BASE : 'jsonapi',\n  BASIC_AUTH_USERNAME: process.env.BASIC_AUTH_USERNAME ? process.env.BASIC_AUTH_USERNAME : 'admin',\n  BASIC_AUTH_PASSWORD: process.env.BASIC_AUTH_PASSWORD ? process.env.BASIC_AUTH_PASSWORD : '123456',\n  API_TYPE: process.env.API_TYPE ? process.env.API_TYPE : \"?_format=json\"\n};\n\nfunction config (lang = 'en', url, jsonapi = false, rest = false) {\n  return {\n    method: 'get',\n    //mode: 'cors',\n    baseURL: env.API_URL + lang + '/' + (!rest ? env.API_BASE : ''),\n    url: url + (jsonapi ? env.API_TYPE : ''),\n    headers: {\n      'Content-Type': 'application/json',\n      //'Authorization': 'Bearer '+ Buffer.from(env.BASIC_AUTH_USERNAME + \":\" + env.BASIC_AUTH_PASSWORD).toString('base64'),\n      'Accept-Language': lang\n    },\n    /*auth: {\n      username: env.BASIC_AUTH_USERNAME,\n      password: env.BASIC_AUTH_PASSWORD\n    }*/\n    //responseType: 'json'\n  }\n};\n\n\n\nmodule.exports.env = env;\nmodule.exports.config = config;"],"sourceRoot":""}