{"version":3,"sources":["webpack:///./src/utils/form-validation.js","webpack:///./src/components/form/ContactForm.js","webpack:///./src/templates/contact.js","webpack:///./src/connectivity/api.form.js","webpack:///./src/connectivity/request-config.js"],"names":["FormValidation","required","value","toString","trim","length","email","validator","isEmail","lt","props","maxLength","react_default","a","createElement","className","validationMessage","type","lang","string","StringHandler","stringI18n","ContactForm","_this","_React$Component","call","this","contactApi","message","state","content","sending","handleValidSubmit","bind","assertThisInitialized_default","contact_fr","contact_en","event","values","_this2","setState","data","contact_form","target_id","uid","subject","name","first_name","last_name","mail","field_destinatione","destination","form_api","sendMessage","then","catch","e","render","console","log","Languages","Fragment","lib","onValidSubmit","label","errorMessage","informations","map","element","key","reactstrap_es","color","disabled","React","Component","propTypes","PropTypes","isRequired","ContactPage","_ref","pageContext","layout","context","pageContent","lg","md","xs","dangerouslySetInnerHTML","__html","node_content","field_contact_info","ContactForm_ContactForm","request_config","require","axios","module","exports","form","config","method","request","getInformation","env","API_URL","process","API_BASE","BASIC_AUTH_USERNAME","BASIC_AUTH_PASSWORD","API_TYPE","url","jsonapi","rest","baseURL","headers","Content-Type","Accept-Language","auth","username","password"],"mappings":"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","file":"component---src-templates-contact-js-352552c7a17896b1a192.js","sourcesContent":["import validator from 'validator';\nimport React from 'react';\nimport StringHandler from './string-handler';\n\nexport default class FormValidation {\n    /**\n     * Check Input Require\n     * @param value\n     * @returns {string}\n     */\n    static required(value) {\n        if (!value.toString().trim().length) {\n            // We can return string or jsx as the 'error' prop for the validated Component\n            return 'require';\n        }\n    };\n\n    /**\n     * Check Input is Email\n     * @param value\n     * @returns {string}\n     */\n    static  email (value) {\n        if (!validator.isEmail(value)) {\n            return `${value} is not a valid email.`\n        }\n    };\n\n    /**\n     * Check Input Length Validation\n     * @param value\n     * @param props\n     * @returns {*}\n     */\n    static  lt (value, props) {\n        // get the maxLength from component's props\n        if (!value.toString().trim().length > props.maxLength) {\n            // Return jsx\n            return <span className=\"error\">The value exceeded {props.maxLength} symbols.</span>\n        }\n    };\n\n    static validationMessage(type, lang) {\n        let string = \"\";\n        switch (type) {\n            case 'required':\n                string = StringHandler.stringI18n(\"This field is required\", lang);\n                break;\n            case 'email':\n                string = StringHandler.stringI18n(\"Email format not valid\", lang);\n                break;\n        }\n        return string;\n    }\n}","import React from 'react';\nimport { Alert, Button } from 'reactstrap';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport PropTypes from 'prop-types';\nimport FormValidation from '../../utils/form-validation';\nimport StringHandler from '../../utils/string-handler';\nimport Languages from '../../data/global/languages';\nimport form_api from '../../connectivity/api.form';\nimport contact_fr from '../../data/api/form--contact--fr';\nimport contact_en from '../../data/api/form--contact--en';\n\nexport default class ContactForm extends React.Component {\n    contactApi = {\"message\" : \"\"};\n    constructor(props) {\n        super(props);\n        this.state = {message: {type : \"\", content: \"\"}, sending: 0};\n        this.handleValidSubmit = this.handleValidSubmit.bind(this);\n        this.contactApi = this.props.lang === 'fr' ? contact_fr : contact_en;\n    }\n    static propTypes = {\n        lang: PropTypes.string.isRequired\n    };\n\n    handleValidSubmit(event, values) {\n        let lang = this.props.lang;\n        this.setState({sending : 1});\n        let data = {\n            \"contact_form\":[{\"target_id\":\"contact\"}],\n            \"uid\": [{\"target_id\": \"contact\" }],\n            \"subject\":[{\"value\":values.subject}],\n            \"name\":[{\"value\": values.first_name + \", \" + values.last_name}],\n            \"mail\":[{\"value\": values.mail}],\n            \"field_destinatione\":[{\"value\": values.destination}],\n            \"message\":[{\"value\": values.message}]\n        };\n        form_api.sendMessage(this.props.lang, 'contact', data).then(values => {\n            this.setState({message: {type: \"success\", \"content\" : this.contactApi.message}, sending: 2});\n        }).catch(e => {\n            this.setState({ sending: 2, message: {type: \"danger\", \"content\" : StringHandler.stringI18n(\"Error occurred while sending to the server, please try again later.\", lang)}});\n        });\n    }\n\n    render() {\n        let lang = this.props.lang;\n        let self = this;\n        console.log(Languages);\n        return (\n            <>\n                {self.state.sending <= 1 ? (\n                    <AvForm onValidSubmit={self.handleValidSubmit}>\n                    <AvField name=\"subject\" label={StringHandler.stringI18n(\"Subject\", lang)} type=\"text\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                    <AvField name=\"first_name\" label={StringHandler.stringI18n(\"First name\", lang)} type=\"text\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                    <AvField name=\"last_name\" label={StringHandler.stringI18n(\"Last name\", lang)} type=\"text\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                    <AvField name=\"mail\" label={StringHandler.stringI18n(\"Email\", lang)} type=\"email\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                    <AvField type=\"select\" label={StringHandler.stringI18n(\"Destination\", lang)} name=\"field_destination\" required errorMessage={FormValidation.validationMessage('required', lang)}>\n                    <option value=\"\">{StringHandler.stringI18n(\"-Select destination-\", lang)}</option>\n                    {Languages.informations[lang].destination.map(element => (\n                        <option key={element.key} value={element.key}>{element.value}</option>\n                    ))}\n                    </AvField>\n                    <AvField name=\"message\" label=\"Message\" type=\"textarea\" required errorMessage={FormValidation.validationMessage('required', lang)} />\n                    <Button color=\"primary\" disabled={self.state.sending >= 1}>\n                    {self.state.sending === 1 ? (<i className=\"fas fa-spinner fa-spin\"/>) : null} {StringHandler.stringI18n(\"Submit\", lang)}\n                    </Button>\n                    </AvForm>\n                ) : (\n                    <>\n                        {self.state.message.content.length > 0 ? (\n                            <Alert color={self.state.message.type}>\n                                {self.state.message.content}\n                            </Alert>\n                        ): null}\n                    </>\n                )}\n            </>\n        );\n    }\n}","import React from 'react'\n\nimport Layout from '../components/layout/layout';\nimport PageContent from '../components/layout/pageContent';\nimport {Container, Row, Col} from 'reactstrap';\nimport ContactForm from '../components/form/ContactForm';\n\nconst ContactPage = ({pageContext}) => {\n    return (\n        <Layout context={pageContext}>\n            <PageContent context={pageContext}/>\n            <Container>\n                <Row className=\"contact\">\n                    <Col lg=\"6\" md=\"6\" xs=\"12\" className=\"information\">\n                        <div className=\"content\" dangerouslySetInnerHTML={{__html: pageContext.node_content.field_contact_info[0].value}}/>\n                    </Col>\n                    <Col lg=\"6\" md=\"6\" xs=\"12\" className=\"form\">\n                        <ContactForm lang={pageContext.lang} />\n                    </Col>\n                </Row>\n            </Container>\n        </Layout>\n    )\n};\n\nexport default ContactPage\n","const request_config = require('./request-config');\nconst axios = require('axios');\n\nfunction sendMessage(lang = 'en', form, data) {\n  const config = request_config.config(lang, '/entity/'+form + '_message/', true, true);\n  config.method = 'POST';\n  config.data = data;\n  return axios.request(config);\n}\n\nfunction getInformation(lang = 'en', form) {\n    const config = request_config.config(lang, '/contact/'+form + '/', true, true);\n    console.log('CONFIG', config);\n    return axios.request(config);\n}\n  \nmodule.exports.sendMessage = sendMessage;\nmodule.exports.getInformation = getInformation;","\n\nconst env = {\n  API_URL: process.env.API_URL ? process.env.API_URL : 'http://www.parrot-corporate.local/',\n  API_BASE: process.env.API_BASE ? process.env.API_BASE : 'jsonapi',\n  BASIC_AUTH_USERNAME: process.env.BASIC_AUTH_USERNAME ? process.env.BASIC_AUTH_USERNAME : 'admin',\n  BASIC_AUTH_PASSWORD: process.env.BASIC_AUTH_PASSWORD ? process.env.BASIC_AUTH_PASSWORD : '123456',\n  API_TYPE: process.env.API_TYPE ? process.env.API_TYPE : \"?_format=json\"\n};\n\nfunction config (lang = 'en', url, jsonapi = false, rest = false) {\n  return {\n    method: 'get',\n    //mode: 'cors',\n    baseURL: env.API_URL + lang + '/' + (!rest ? env.API_BASE : ''),\n    url: url + (jsonapi ? env.API_TYPE : ''),\n    headers: {\n      'Content-Type': 'application/json',\n      //'Authorization': 'Bearer '+ Buffer.from(env.BASIC_AUTH_USERNAME + \":\" + env.BASIC_AUTH_PASSWORD).toString('base64'),\n      'Accept-Language': lang\n    },\n    auth: {\n      username: env.BASIC_AUTH_USERNAME,\n      password: env.BASIC_AUTH_PASSWORD\n    }\n    //responseType: 'json'\n  }\n};\n\n\n\nmodule.exports.env = env;\nmodule.exports.config = config;"],"sourceRoot":""}